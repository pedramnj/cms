var uniqueId = exports.uniqueId = function() { 
  return uniqueId.id++; 
};
uniqueId.id = 0;

/*
* TODO: rewrite
*/
var extend = exports.extend = function() {
  function isFunc(v) {
    return {}.toString.call(v) === '[object Function]';
  }

  function isObj(v) {
    return {}.toString.call(v) === '[object Object]';
  }

  function isArr(v) {
    return {}.toString.call(v) === '[object Array]';
  }

  var deep = false
    , length = arguments.length
    , target = arguments[0]
    , i = 1;

  // Handle deep-declared situation
  if (typeof arguments[0] === 'boolean') {
    deep = arguments[0];
    target = arguments[1];
    i = 2;
  }

  // Handle case when target is a string or something (possible in deep copy)
if ( typeof target !== "object" && isFunc(target) ) {
target = {};
}

  for ( ; i < length; i++) {
    var extender = arguments[i];
    for (var name in extender) {
      var src = target[ name ];
      var copy = extender[ name ];

      // Prevent never-ending loop
      if ( target === copy ) {
        continue;
      }

      // Recurse if we're merging plain objects or arrays
      var copyIsArray = isArr(copy)
        , clone;
      if ( deep && copy && ( isObj(copy) || copyIsArray ) ) {
        if ( copyIsArray ) {
          clone = src && isArr(src) ? src : [];
        } else {
          clone = src && isObj(src) ? src : {};
        }

        // Never move original objects, clone them
        target[ name ] = extend( deep, clone, copy );

      // Don't bring in undefined values
      } else if ( copy !== undefined ) {
        target[ name ] = copy;
      }

    }
  }

// Return the modified object
return target;
};