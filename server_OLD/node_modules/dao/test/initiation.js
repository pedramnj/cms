var should = require('should');

var dao = require('./..');

describe('Initiation', function(){

  describe('application should be passed into "plugin.init()"', function() {
  
    it('parallel', function(done) {
      var app = dao.App(), thisRefersTo;

      var plugin = { init : function(cb) { thisRefersTo = this; cb(); } }

      app.use(plugin).init(function(err){
        should.not.exist(err);
        thisRefersTo.should.equal(app);
        done();
      });
    });

    it('sequential', function(done) {
      var app = dao.App(), thisRefersTo;

      var plugin = { init : function(cb) { thisRefersTo = this; cb(); } }

      app.use(plugin).initSequentially(function(err){
        should.not.exist(err);
        thisRefersTo.should.equal(app);
        done();
      });
    });    
  });

  it('should not initiate plugins without init()', function(done) {
    var app = dao.App();
    var p1 = { attach : function(opts) { } }
      , p2 = { init : function(cb) { this.called = true; cb(); } }

    app.use(p1).use(p2);
    app.init(function(err) {
      should.not.exist(err);
      should.ok(app.called);
      done();
    })
  })
  
  describe('sequential initialisation', function () {
    it('should initiate in proper order', function(done) {
      var app = dao.App();
      app.order = [];
      
      var plugins = [];
      for (var i = 0; i < 3; i++) {
        (function(i){
          plugins.push({ 
            name : i,
            init : function(done) {
              process.nextTick(function(){
                app.order.push(i);
                done(null);
              })
            } 
          });
        })(i+1);

        app.use(plugins[i]);
      }
  
      app.initSequentially(function(err){
        should.not.exist(err);
        app.order.should.eql([1,2,3])
        done();
      })
    }) 
  });
  

  describe('parallel initialisation', function() {
    it('should not initialise application with missing dependency', function(done) {
      var app = dao.App();
      var plugin = { deps : "PluginThatIsNotPresent" }

      app.use(plugin);

      app.init(function(err) {
        should.exist(err);
        done();
      })
    });

    it('should throw an error if initial callback was called more than one time', function() {
      var app = new dao.App()
        , plugin = { 
            init : function(cb) {
              cb();
              cb();
            }
          }

      app.use(plugin);
      (function() {
        app.init(Function.prototype)
      }).should.throwError(/initiated once*/);

    })

    it('should always provide plugins initialisation order based on their deps', function(done){
      var order = [];
  
      var initFuncGenerator = function(name) {
        return function(done) {
          order.push(name + ' started');
          setTimeout(function() {
            order.push(name + ' ended');
            done();
          }, Math.random()*5);
        }
      }
  
      var app = dao.App();
      var pluginSet = [
        { name:"1", init: initFuncGenerator("1") },
        { name:"2", init: initFuncGenerator("2") },
        { name:"3", init: initFuncGenerator("3") },
        { name:"4", init: initFuncGenerator("4") },
        { name:"5", init: initFuncGenerator("5") },
        { name:"6", init: initFuncGenerator("6") },
  
        { name:"12", deps:"1,2", init: initFuncGenerator("12") },
        { name:"56", deps:"5,6", init: initFuncGenerator("56") },
        { name:"123", deps:["12", "3"], init: initFuncGenerator("123") },
  
        { name:"123456", deps:"123, 4, 56", init: initFuncGenerator("123456") },      
      ];
  
      for (var i = 0; i < pluginSet.length; i++) {
        app.use(pluginSet[i]);
      }
  
      app.init(function(err) {
        should.not.exist(err);

        // order checks should be placed here

        done();
      });
  
    })
  })

});